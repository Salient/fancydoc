\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fancydoc/fancydoc}[2020/06/09 Fancy Technical Writing Commands, Shortcuts, Utilities]

\usetikzlibrary{math,arrows.meta,decorations.markings,backgrounds, decorations.pathreplacing, shapes, tikzmark,positioning,shadows,trees,calc,fit,intersections,shadows.blur}

% Setup conditional logic before processing Options
\RequirePackage{etoolbox}

% New toggles default to false
\newtoggle{suppliersow}

\DeclareOption{sowdoc}{\toggletrue{suppliersow}}
\ProcessOptions\relax



\RequirePackage{calc}
%\usepackage{tikz}
%\usepackage[most]{tcolorbox}
\usepackage{pgfplots}
\pgfplotsset{compat=1.16}



% Special formatting/boxes

\newsavebox{\fmbox}
\newenvironment{fmpage}[1]
{\begin{lrbox}{\fmbox}\begin{minipage}{#1}}
			{\end{minipage}\end{lrbox}\fbox{\usebox{\fmbox}}}

\newenvironment{boldlist}[2]{\newcommand{\captiontemp}{#1~}\newcommand{\labeltemp}{#2}
	%   \begin{table}[h!]
	\newcommand{\entry}[3]{\textbf{##1} & {\scshape ##2} \newline {\textsl{##3}}\\}

	\begin{center}
		\begin{tabular}{ B@{~\textbf{\textendash~}}p{0.6\linewidth}}}{
			%       \end{tabular}\protect\caption{\captiontemp}\protect\label{\labeltemp}
		\end{tabular}\protect\label{\labeltemp}
	\end{center}
	%   \end{table}
}

\newenvironment{customboldlist}[3]{\newcommand{\captiontemp}{#1~}\newcommand{\labeltemp}{#2}
	\begin{table}[h!]\centering
		\begin{tabular}{| B@{~\textbf{\textendash~}}p{#3}|}}{
		\end{tabular}
		%\protect\caption{\captiontemp}\protect\label{\labeltemp}
		\end{tabular}\protect\label{\labeltemp}
	\end{table}
}

\newcommand{\addresspar}[3]{
  \smallskip

    \def\arraystretch{0.9}%  1 is the default, change whatever you need
  \begingroup
  \fontfamily{lmtt}\selectfont    
  
  \hfill\begin{tabular}{l}
      \textbf{#1}\\
      \textbf{#2}\\
      \textbf{#3}\\
  \end{tabular}\hfill
  \endgroup
    }
		


% Slanted column headers for tables
\RequirePackage{adjustbox,array}

% Slanted column headers for tables
\newcolumntype{R}[2]{%
    >{\adjustbox{angle=#1,lap=\width-(#2)}\bgroup}%
    l%
    <{\egroup}%
}

\newcommand*\rot{\multicolumn{1}{R{30}{1em}}}



% Handy constants

% Put signature lines, etc. here

% the eforms package is apparently not in every \latex distribution.
% It's not in tex live (mac)
% should look into some other options
%\usepackage[pdftex]{eforms}


% --------- Graphics Functions

\input{fancydoc/fancydoc.tikz}
\newif\ifblackandwhitecycle
\gdef\patternnumber{0}

\pgfkeys{/tikz/.cd,
	zoombox paths/.style={
			draw=orange,
			very thick
		},
	black and white/.is choice,
	black and white/.default=static,
	black and white/static/.style={
			draw=white,
			zoombox paths/.append style={
					draw=white,
					postaction={
							draw=black,
							loosely dashed
						}
				}
		},
	black and white/static/.code={
			\gdef\patternnumber{1}
		},
	black and white/cycle/.code={
			\blackandwhitecycletrue
			\gdef\patternnumber{1}
		},
	black and white pattern/.is choice,
	black and white pattern/0/.style={},
	black and white pattern/1/.style={
			draw=white,
			postaction={
					draw=black,
					dash pattern=on 2pt off 2pt
				}
		},
	black and white pattern/2/.style={
			draw=white,
			postaction={
					draw=black,
					dash pattern=on 4pt off 4pt
				}
		},
	black and white pattern/3/.style={
			draw=white,
			postaction={
					draw=black,
					dash pattern=on 4pt off 4pt on 1pt off 4pt
				}
		},
	black and white pattern/4/.style={
			draw=white,
			postaction={
					draw=black,
					dash pattern=on 4pt off 2pt on 2 pt off 2pt on 2 pt off 2pt
				}
		},
	zoomboxarray inner gap/.initial=5pt,
	zoomboxarray columns/.initial=2,
	zoomboxarray rows/.initial=2,
	subfigurename/.initial={},
	figurename/.initial={zoombox},
	zoomboxarray/.style={
			execute at begin picture={
					\begin{scope}[
							spy using outlines={%
									zoombox paths,
									width=\imagewidth / \pgfkeysvalueof{/tikz/zoomboxarray columns} - (\pgfkeysvalueof{/tikz/zoomboxarray columns} - 1) / \pgfkeysvalueof{/tikz/zoomboxarray columns} * \pgfkeysvalueof{/tikz/zoomboxarray inner gap} -\pgflinewidth,
									height=\imageheight / \pgfkeysvalueof{/tikz/zoomboxarray rows} - (\pgfkeysvalueof{/tikz/zoomboxarray rows} - 1) / \pgfkeysvalueof{/tikz/zoomboxarray rows} * \pgfkeysvalueof{/tikz/zoomboxarray inner gap}-\pgflinewidth,
									magnification=3,
									every spy on node/.style={
											zoombox paths
										},
									every spy in node/.style={
											zoombox paths
										}
								}
						]
						},
						execute at end picture={
					\end{scope}
					\node at (image.north) [anchor=north,inner sep=0pt] {\subcaptionbox{\label{\pgfkeysvalueof{/tikz/figurename}-image}}{\phantomimage}};
					\node at (zoomboxes container.north) [anchor=north,inner sep=0pt] {\subcaptionbox{\label{\pgfkeysvalueof{/tikz/figurename}-zoom}}{\phantomimage}};
					\gdef\patternnumber{0}
				},
			spymargin/.initial=0.5em,
			zoomboxes xshift/.initial=1,
			zoomboxes right/.code=\pgfkeys{/tikz/zoomboxes xshift=1},
			zoomboxes left/.code=\pgfkeys{/tikz/zoomboxes xshift=-1},
			zoomboxes yshift/.initial=0,
			zoomboxes above/.code={
					\pgfkeys{/tikz/zoomboxes yshift=1},
					\pgfkeys{/tikz/zoomboxes xshift=0}
				},
			zoomboxes below/.code={
					\pgfkeys{/tikz/zoomboxes yshift=-1},
					\pgfkeys{/tikz/zoomboxes xshift=0}
				},
			caption margin/.initial=4ex,
		},
	adjust caption spacing/.code={},
	image container/.style={
			inner sep=0pt,
			at=(image.north),
			anchor=north,
			adjust caption spacing
		},
	zoomboxes container/.style={
			inner sep=0pt,
			at=(image.north),
			anchor=north,
			name=zoomboxes container,
			xshift=\pgfkeysvalueof{/tikz/zoomboxes xshift}*(\imagewidth+\pgfkeysvalueof{/tikz/spymargin}),
			yshift=\pgfkeysvalueof{/tikz/zoomboxes yshift}*(\imageheight+\pgfkeysvalueof{/tikz/spymargin}+\pgfkeysvalueof{/tikz/caption margin}),
			adjust caption spacing
		},
	calculate dimensions/.code={
			\pgfpointdiff{\pgfpointanchor{image}{south west} }{\pgfpointanchor{image}{north east} }
			\pgfgetlastxy{\imagewidth}{\imageheight}
			\global\let\imagewidth=\imagewidth
			\global\let\imageheight=\imageheight
			\gdef\columncount{1}
			\gdef\rowcount{1}
			\gdef\zoomboxcount{1}
		},
	image node/.style={
			inner sep=0pt,
			name=image,
			anchor=south west,
			append after command={
					[calculate dimensions]
					node [image container,subfigurename=\pgfkeysvalueof{/tikz/figurename}-image] {\phantomimage}
					node [zoomboxes container,subfigurename=\pgfkeysvalueof{/tikz/figurename}-zoom] {\phantomimage}
				}
		},
	color code/.style={
			zoombox paths/.append style={draw=#1}
		},
	connect zoomboxes/.style={
			spy connection path={\draw[draw=none,zoombox paths] (tikzspyonnode) -- (tikzspyinnode);}
		},
	help grid code/.code={
			\begin{scope}[
					x={(image.south east)},
					y={(image.north west)},
					font=\footnotesize,
					help lines,
					overlay
				]
				\foreach \x in {0,1,...,9} {
						\draw(\x/10,0) -- (\x/10,1);
						\node [anchor=north] at (\x/10,0) {0.\x};
					}
				\foreach \y in {0,1,...,9} {
						\draw(0,\y/10) -- (1,\y/10);                        \node [anchor=east] at (0,\y/10) {0.\y};
					}
			\end{scope}
		},
	help grid/.style={
			append after command={
					[help grid code]
				}
		},
}

\newcommand{\Dotfill}[1]{\leavevmode \cleaders \hb@xt@ #1{\hss .\hss }\hfill \kern \z@}

\newcommand\phantomimage{%
	\phantom{%
		\rule{\imagewidth}{\imageheight}%
	}%
}
\newcommand\zoombox[2][]{
	\begin{scope}[zoombox paths]
		\pgfmathsetmacro\xpos{
			(\columncount-1)*(\imagewidth / \pgfkeysvalueof{/tikz/zoomboxarray columns} + \pgfkeysvalueof{/tikz/zoomboxarray inner gap} / \pgfkeysvalueof{/tikz/zoomboxarray columns} ) + \pgflinewidth
		}
		\pgfmathsetmacro\ypos{
			(\rowcount-1)*( \imageheight / \pgfkeysvalueof{/tikz/zoomboxarray rows} + \pgfkeysvalueof{/tikz/zoomboxarray inner gap} / \pgfkeysvalueof{/tikz/zoomboxarray rows} ) + 0.5*\pgflinewidth
		}
		\edef\dospy{\noexpand\spy [
				#1,
				zoombox paths/.append style={
						black and white pattern=\patternnumber
					},
				every spy on node/.append style={#1},
				x=\imagewidth,
				y=\imageheight
			] on (#2) in node [anchor=north west] at ($(zoomboxes container.north west)+(\xpos pt,-\ypos pt)$);}
		\dospy
		\pgfmathtruncatemacro\pgfmathresult{ifthenelse(\columncount==\pgfkeysvalueof{/tikz/zoomboxarray columns},\rowcount+1,\rowcount)}
		\global\let\rowcount=\pgfmathresult
		\pgfmathtruncatemacro\pgfmathresult{ifthenelse(\columncount==\pgfkeysvalueof{/tikz/zoomboxarray columns},1,\columncount+1)}
		\global\let\columncount=\pgfmathresult
		\ifblackandwhitecycle
			\pgfmathtruncatemacro{\newpatternnumber}{\patternnumber+1}
			\global\edef\patternnumber{\newpatternnumber}
		\fi
	\end{scope}
}



% ---------- Utility Code

%%% This is good stuff
% https://tex.stackexchange.com/questions/416260/define-global-commands-in-aux-file
% https://tex.stackexchange.com/questions/4736/what-is-the-difference-between-fragile-and-robust-commands
%\makeatletter
\newcommand{\useVal}[1]{%
	\ifcsname useVal@#1\endcsname
		\csname useVal@#1\endcsname
	\else
		??%
	\fi
}

\newcommand{\defVal}[2]{%
	\ifcsname useVal@#1@defined\endcsname
		\PackageError{useVal}{Value "#1" already defined}{}
	\else
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef{useVal@#1}}{#2}%
		}%
		\global\@namedef{useVal@#1@defined}{}%
	\fi%
}

\newcommand{\defValwCount}[2]{%
	\ifcsname useVal@herpaderp#1@defined\endcsname
		\PackageError{useVal}{Value "#1" already defined}{}
	\else
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef}{useVal@#1}\unexpanded{{#2}}%
		}%
		\global\@namedef{useVal@#1@defined}{}%
	\fi%
}
%\makeatother


% % % % % % % % % % % % % % % % % % % % % % % %
% % % Custom Framework Commands...
% % % % % % % % % % % % % % % % % % % % % % % %

% May split out into its own module at some point
% &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
% Electrical Connector Definition Framework




% Formatting of References
% \crefdefaultlabelformat{#2\unexpanded{?type? [}#1#3\unexpanded{]}


% Only bother loading if we are going to use it
\iftoggle{suppliersow}{
\newwrite\tempfile
\immediate\openout\tempfile=sdrl-table.tex

\newcommand{\recsdrl}[6]{\immediate\write\tempfile{
\unexpanded{&&&\\\hyperref[}#2\unexpanded{]}\@charlb\unexpanded{\bfseries[SDRL }#1\unexpanded{]}\@charrb\unexpanded{ &\hyperref[}#2\unexpanded{]}\@charlb\unexpanded{\bfseries }#4\@charrb\unexpanded{& \hyperref[}#2\unexpanded{]}\@charlb\unexpanded{ }#3\@charrb \unexpanded{ & \hyperref[}#2\unexpanded{]}\@charlb\unexpanded{ }#6\@charrb \unexpanded{ & \bfseries} #5 \unexpanded{\\}}}
%\unexpanded{\\[-12pt]\hline\cline{2-4}\\[12pt]}}}

\newcommand{\subrecsdrl}[3]{\immediate\write\tempfile{\unexpanded{& \qquad Part } #1\unexpanded{ - }#2 \unexpanded{ &&& } #3 \unexpanded{\\}}}

% \reqitem{requirement title}{desired label for requirement}{something}
% \subreqitem{subreq title}{expected time due}

% {\textbf{[ESAD \string{\thereqitem}]} (\textit{#1})}

% If this comes up again, look into \usepackage{arrayjobx}

% Set little shortcut alias to refer back to entries
% \newcommand\reqref[1]{\protect\csname reqpair#1\endcsname}
% \newcommand\setreq[2]{\expandafter\def\csname reqpair#1\endcsname{#2}}

\newcommand{\listreqs}{Summary List of Supplier Data Requirements}

\newlistof{reqitem}{rqs}{\listreqs}
\newcommand{\reqitem}[3]{
	\refstepcounter{reqitem}
	\label{#2}
	\defVal{#2-num}{\thereqitem}
	\defVal{#2-name}{#1}
	\recsdrl{\thereqitem}{#2}{\whereamisafe}{#1}{#3}{\thepage}

	~\\\noindent\framebox[\linewidth]{\strut\textsc{\textbf{Data Requirement:} #1}}{\normalmarginpar\raisebox{4pt}{\marginnote{\large\textbf{[SDRL \thereqitem]}}}}{\rule{1in}{0.5pt}}\\

	\addcontentsline{rqs}{reqitem}{\protect\numberline{\thereqitem}\quad
		%       \makebox[0.6\linewidth][l]{ --- \quad\textbf{#1}\Dotfill{0.8 em}}
		%       \slshape Paragraph \thesubparagraph,\quad Page }}
		\qquad --- \enspace\textbf{#1}\Dotfill{0.8 em} \hfil
		\slshape Section \whereami \quad Page }
}

\renewcommand{\cftreqitemfont}{\scshape}
%    \renewcommand{\cftreqitemleader}{\bfseries\cftdotfill{\cftreqitemdotsep}}
\renewcommand{\cftreqitemleader}{}
\renewcommand{\cftreqitempagefont}{}
\renewcommand{\cftreqitempresnum}{[SDRL }
\renewcommand{\cftreqitemaftersnum}{]}

\newlength{\mylen}   % a "scratch" length
\settowidth{\mylen}{0.5} % extra space
\addtolength{\cftreqitemnumwidth}{\mylen} % add the extra space

%    \renewcommand{\cftreqitemaftersnumb}{}

\newcommand{\refreq}[1]{\hyperref[#1]{\textbf{[SDRL \useVal{#1-num}]} (\textsc{\useVal{#1-name}})}}

%
%
\newlistentry[reqitem]{subreqitem}{rqs}{1}
\cftsetindents{subreqitem}{1.5em}{3.0em}
\renewcommand{\thesubreqitem}{\thereqitem.\alph{subreqitem}}

\newcommand{\subreqitem}[2]{%
	\refstepcounter{subreqitem}
	%   \par\textbf{\thesubreqitem) #1}
	%   \addcontentsline{rqs}{subreqitem}{\protect\numberline{\thesubreqitem}#1}
	\subrecsdrl{\Alph{subreqitem}}{#1}{#2}
}
\setcounter{rqsdepth}{2}
}{}


\newcounter{@arrayLen}
\usepackage{xstring}
\newcommand{\getArrayLen}[1]{
	\setcounter{@arrayLen}{0}
	\foreach \x in #1 {%
			\IfStrEq{\x}{}{}{% only increment when non-empty
				\stepcounter{@arrayLen}%
			}%
		}%
	\arabic{@arrayLen}
}
\newcommand{\repeatArrayLen}{
	\arabic{@arrayLen}
}
% \newcommand{\getArrayLength}{\arabic{@arrayLen}}%
% \newcommand*{\SetArrayLength}[1]{%
%     % Counts the number of array members. This ignore any empty
%     % array members created by extraneous commas (such as those
%     % as  result of a double comma, or a trailing comma.
%     \setcounter{@LengthOfArray}{0}%
%     \foreach \x in #1 {%
%         \IfStrEq{\x}{}{}{% only increment when non-empty
%             \stepcounter{@LengthOfArray}%
%         }%
%     }%
% }%

\newcommand{\whereami}{%
	\ifnum\c@section=0 %
		\thechapter
	\else
		\ifnum\c@subsection=0 %
			\thesection
		\else
			\ifnum\c@subsubsection=0 %
				\thesubsection
			\else
				\ifnum\c@paragraph=0 %
					\thesubsubsection
				\else
					\ifnum\c@subparagraph=0 %
						\theparagraph%
					\else
						\thesubparagraph %
					\fi
				\fi
			\fi
		\fi
	\fi
}
\makeatother

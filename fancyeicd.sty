\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{core/fancyeicd}[2020/10/09 Fancy Electrical Interface Control Document Framework]

\PackageInfo{fancyeicd}{Loading Framework for Electrical Interface Control Documents}

\RequirePackage{marginnote}
\RequirePackage{booktabs}
\RequirePackage{xcolor}
%  We don't really use this package, but we need cleveref, and it has to be loaded after amsmath if it's used, so we are going to preemptively atteck!
\RequirePackage{amsmath}
\RequirePackage[nameinlink]{cleveref}
\RequirePackage{tocloft}

% ==============================================
% ==============================================
% Initialize Framework

% If run before, there will be things to remember
\InputIfFileExists{pinData.tex}{
	\PackageInfo{fancyeicd}{Reading in previous pin definitions.}
} {
	\PackageInfo{fancyeicd}{No previous pin definitions.}
}

% Record references for use anywhere in the document.
\newwrite\fancyeicd@data
\immediate\openout\fancyeicd@data=pinData.tex


% Right now only supports one global connector namespace
% easy enough to add more
\newcommand{\defPin}[4]{
	%   Arguments should be {number/counterreference}
	%                       {Signal name (underscores escaped....need to figure out how to do that )}
	%                       {shortname}

	\ifcsname fancy@pinDefn@#1@defined\endcsname
		\PackageError{fancy}{Connector Pin definition '#1' is defined twice}{}
	\else
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef}{fancy@pinDef@numToName@#1}\unexpanded{{\sig{#2}}}%
		}
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef}{fancy@pinDef@numToAlias@#1}\unexpanded{{#3}}%
		}
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef}{fancy@pinDef@numToType@#1}\unexpanded{{#4}}%
		}
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef}{fancy@pinDef@aliasToName@#3}\unexpanded{{\sig{#2}}}%
		}
		\immediate\write\@auxout{%
			\unexpanded{\global\@namedef}{fancy@pinDef@aliasToNum@#3}{#1}%
		}
		% \unexpanded{\global\@namedef}{fancy@pinDef@#1@defined}{}
		\global\@namedef{fancy@pinDef@#1@defined}{}%
	\fi
}
% TODO - stream line above

\newcommand{\pinNumName}[1]{%
	\ifcsname fancy@pinDef@numToName@#1\endcsname
		\csname fancy@pinDef@numToName@#1\endcsname
	\else
		??%
	\fi
}

\newcommand{\pinNumType}[1]{%
	\ifcsname fancy@pinDef@numToType@#1\endcsname
		\csname fancy@pinDef@numToType@#1\endcsname
	\else
		red%
	\fi
}

\newcommand{\pinAliasNum}[1]{%
	\ifcsname fancy@pinDef@aliasToNum@#1\endcsname%
		\csname fancy@pinDef@aliasToNum@#1\endcsname%
	\else
		??%
	\fi
}

\newcommand{\pinAliasName}[1]{%
	\ifcsname fancy@pinDef@aliasToName@#1\endcsname
		\csname fancy@pinDef@aliasToName@#1\endcsname
	\else
		??%
	\fi
}

\newcommand{\pinAliasRef}[1]{%
	\edef\thispin{\pinAliasNum{#1}}%
	% {\smaller\sig{\sloppy\sloppy\pinNumName{\thispin}} (\textbf{\textsc{\smaller{}Pin \thispin})}}}
	{\sig{\sloppy\sloppy\pinNumName{\thispin}} (\textbf{\textsc{\smaller{}Pin \thispin})}}}

\newcommand{\pinsig}[1]{%
	\edef\thispin{\pinAliasNum{#1}}%
	% {\smaller\sig{\pinNumName{\thispin}}}}
	{\sig{\pinNumName{\thispin}}}}
\newcommand{\state}[1]{\sloppy\fbox{\sig{#1}}\xspace}



% Start framework definitions

\tikzset{%
	pinnode/.style = {inner sep = 2pt, minimum width=20pt, draw, circle},
	typePower/.style = {fill = red!80},
	typeAnalogIn/.style = {fill = brown!60},
	typeAnalogOut/.style = {fill = cyan!30},
	typeGround/.style = {fill = green!20},
	typeDataHi/.style = {fill = blue!50},
	typeDiscreteIn/.style = {fill = yellow!60},
	typeDiscreteOut/.style = {fill = orange!60},
	typeIsoDiffGnd/.style = {fill = blue!20},
	typeBreakwireEx/.style = {fill = brown!70},
	% typeBreakwireSense/.style = {fill = orange, pattern=dots,pattern color=yellow},
	typeBreakwireSense/.style = {fill = brown!40},
	typeTestInput/.style = {fill = purple!30},
	typeReserved/.style = {fill = gray!10, font=\color{gray}}
}

\newcommand{\placeLegend}{
	% \vfill
	% \resizebox{0.20\textwidth}{!}{
	\begin{tikzpicture} [scale=0.50,transform shape, every node/.style = {node distance=10pt, outer sep = 0cm, inner sep = 0cm}, font = \sffamily]
		% , transform shape, node distance = 0.5cm ]
		\node[typePower, pinnode] (lpwr) {};                  \node[right = of lpwr] {POWER};
		\node[typeGround, pinnode, below = of lpwr] (lgnd) {}; \node[right = of lgnd] {POWER RTN/BOARD GND};
		\node[typeDataHi, pinnode, below = of lgnd] (lcom) {}; \node[right = of lcom] {DATA/COMM. POS. (+)};
		\node[typeIsoDiffGnd, pinnode, below = of lcom] (ldil) {}; \node[right = of ldil] {ISOLATED/DIFFERENTIAL REF. (-)};
		\node[typeDiscreteIn, pinnode, below = of ldil] (ldih) {}; \node[right = of ldih] {DISCRETE INPUT SIGNAL (+)};
		\node[typeDiscreteOut, pinnode, below = of ldih] (dout) {}; \node[right = of dout] {DISCRETE OUTPUT SIGNAL (+)};
		% \node[typeAnalogIn, pinnode, below = of dout] (anin) {}; \node[right = of anin] {ANALOG INPUT SIGNAL (+)};
		\node[typeAnalogOut, pinnode, below = of dout] (anout) {}; \node[right = of anout] {ANALOG OUTPUT SIGNAL (+)};
		% \node[typeBreakwireEx, pinnode, below = of anout] (lbwh) {}; \node[right = of lbwh] {BREAK WIRE EXCITATION};
		% \node[typeBreakwireSense, pinnode, below = of lbwh] (lbwl) {}; \node[right = of lbwl] {BREAK WIRE INDICATE};
		\node[typeTestInput, pinnode, below = of anout] (ltst) {}; \node[right = of ltst] {NON-TACTICAL/TEST USE ONLY};
		\node[typeReserved, pinnode, below = of ltst, font=\color{black}] (lres) {}; \node[right = of lres] {RESERVED/UNUSED};
	\end{tikzpicture}
	% }
	% \vfill
}

\newcommand{\modcolor}{black}

\newcommand{\labelPins}[1]{
	% Draw pins with fill color specified, draw label and pin
	\foreach \q/\p [count=\x] in {#1}{
			\node[pinnode, \p] at (pin\x) (pin\x){\x}; % Label pin number

			% Normal pins written in black
			\renewcommand{\modcolor}{black}

			% Unused/reserved pins in gray
			\findwords[q]{\q}{type_reserved}
			\ifnum\theresult > 0
				\renewcommand{\modcolor}{gray}
			\fi

			% TODO: update code for different connector types
			\ifnum\x>13
				\node[\modcolor, anchor = east, minimum width=0cm, left = of pin\x, xshift=0.5in] (pinName\x) {\sig{\caseupper{\q}}};
			\else
				\node[\modcolor, anchor = west, minimum width = 0cm, right = of pin\x, xshift=-0.5in] (pinName\x){\sig{\caseupper{\q}}};
			\fi
			\draw[dashed,gray] (pinName\x) -- (pin\x);
		}
}

\newcommand{\labelPinsByReference}{
	\foreach \q [count=\x] in {1,...,25}{
			\node[pinnode, \pinNumType{\q}] at (pin\x) (pin\x){\x};
			\ifnum\x>13
				\node[anchor = east, minimum width=0cm, left = of pin\x, xshift=0.5in] (pinName\x) {\useVal{pinName\x}};
			\else
				\node[anchor = west, minimum width = 0cm, right = of pin\x, xshift=-0.5in] (pinName\x) {\useVal{pinName\x}};
			\fi
			\draw[dashed,gray] (pinName\x) -- (pin\x);
		}
}

\newcommand{\drawConnector}{
	% Lay out pins of connector and draw boundary
	\coordinate (pin0); % Establish name of origin
	\foreach \x [remember=\x as \lastx (initially 0)] in {1,...,13}{% draw top row. Backwards because female
			% \node[above  of = pin\lastx, yshift=-0.2cm] (pin\x) {\x};
			\coordinate[above = 30pt of pin\lastx] (pin\x);
		}
	\coordinate (adjOff) at ($ (pin1)!0.5!(pin2) $);
	\coordinate[left = 25pt of adjOff] (pin14);
	\foreach \x [remember=\x as \lastx (initially 14)] in {15,...,25}{% draw top row. Backwards because female
			% \node[above of = pin\lastx, yshift=-0.2cm] (pin\x) {\x};
			\coordinate[above = 30pt of pin\lastx] (pin\x);
		}

	% Draw connector shell and fill

	% mark the four corners
	\coordinate[above right = of pin13, xshift=-10pt, yshift=2pt] (corn1);
	\coordinate[below right = of pin1, xshift=-10pt, yshift=-2pt] (corn2);
	\coordinate[below left = of pin15, xshift=10pt, yshift=-12pt] (corn3);
	\coordinate[above left = of pin24, xshift=10pt, yshift=12pt] (corn4);

	\draw[ultra thick, rounded corners = 1cm, name path = shell, fill=brown!50!gray, fill opacity=0.2] (corn1) -- (corn2) -- (corn3) -- (corn4) -- cycle;
	\path[name path = cgnd] (corn3) ++(0cm, -0.75cm) ++(70:1cm) -- ++(-135:2cm);
	\draw[name intersections={of=shell and cgnd, name=i}] (i-1) coordinate (xmark);
	\draw[line width = 0.75pt] (xmark) -- ++(-145:0.5cm) -- ++(-1.75cm,0cm) -- ++(0cm, -0.5cm) coordinate(tc);
	\draw[line width = 1.15pt] (tc)       -- +(-0.5cm,0cm) coordinate (t1) -- +(0.5cm,0cm) coordinate (t2);
	\draw[line width = 1.15pt] (t1) -- +(-75:0.5cm);
	\draw[line width = 1.15pt] (tc) -- +(-75:0.5cm);
	\draw[line width = 1.15pt] (t2) -- +(-75:0.5cm);
}

\newcommand{\renderConnector}{
	\begin{figure}[htb]
		\centering
		\resizebox{!}{0.5\textheight}{
			\begin{tikzpicture}% [every node/.style ={ minimum width = 0in}]
				\drawConnector{}
				\labelPinsByReference
				% \node[below = of pin1,yshift=0.5cm] {ACES \ac{ESAD} Pinout};
			\end{tikzpicture}}
		\hspace{1cm}\placeLegend
		\vspace{0.5cm}
		\caption{Pinout Diagram of \ac{ESAD} Electrical Interface}%
		\label{pinout}
	\end{figure}
}

% \begin{landscape}
% \begin{minipage}{0.4\linewidth}
% \begin{figure}[htpb]
%     \centering
% \resizebox{0.5\linewidth}{!}{


% \caption{ACES Fuze Pinout}%
% \end{figure}
% \end{minipage}
% \begin{minipage}{0.4\linewidth}
% \begin{figure}[htpb]
% \centering
% \resizebox{!}{0.7\textheight}{

\newcommand{\sref}[1]{{\smaller\sig{#1}}}
\newcommand{\srefn}[1]{\useVal{pinName#1}}

\newenvironment{pinout}{
	%
	% Inserts row in pinout definition
	% First column will be pin number, taken care of automatically.  Second is
	% Pin Name; will be formatted automatically (spaces not included) Third,

	% TYPE Forth, PARAMS Fifth, DESC.
	%
	% So, four arguments.

	% Declare row types and commands

	\newcommand{\pin}[5]{
		{\textbf{\thepincount}}
		& \sig{\smaller ##1} & {\smaller##4} & {\smaller ##5} \\
		\defPin{\thepincount}{##1}{##2}{##3}
		\defValwCount{pinName\thepincount}{\sig{##1}}
		% \defValwCount{pinType\thepincount}{##2}
		\stepcounter{pincount}
		% \label{##1desc}
	}

	\newcommand{\resvpin}{
		\textbf{\textcolor{gray}{\noindent\thepincount}} & \textcolor{gray}{\sig{\smaller{}N/C}} & \textcolor{gray}{\sig{\smaller{}RESERVED}} &\textcolor{gray}{\smaller{}Not used in  tactical configuration.}  \\ % \hline{}

		\defPin{\thepincount}{RESERVED}{resv}{typeReserved}
		\defValwCount{pinName\thepincount}{\color{gray}{\sig{}}}
		\stepcounter{pincount}
	}


	% Same as \pin, but formatted gray and replaces Pin Name with "RESERVED",
	% but appends a fifth bolded statement why it is not used
	% \newcommand{\resvpin}[5]{
	%     \textcolor{gray}{\thepincount}
	%     & \textcolor{gray}{\sig{\smaller{}\itshape##5}}
	%     % & \textcolor{gray}{\itshape##1}
	%       &
	%       % {\itshape\textcolor{gray}{##3}}\newline
	%       \textcolor{gray}{\bfseries##4}
	%       \\ \hline{}
	%       \defValwCount{pinName\thepincount}{\color{gray}{\sig{reserved}}}
	%       \defValwCount{pinType\thepincount}{##1}
	%       \stepcounter{pincount}
	%       % \label{##5desc}
	%   }

	% Setup table and tabular env

	% TODO, get around this hack properly
	\table[htbp!]

	\ifdef{\thepincount}{ % True \addtocounter{table}{-1}
		\caption*{AFE Pin Descriptions (cont.)}
	}{ % False
		\newcounter{pincount}
		\setcounter{pincount}{1}
		\caption{AFE Pin Descriptions}
	}

	% \smaller{}
	\label{pinlist}
	% \smaller{}

	\def\arraystretch{1.15}%  1 is the default, change whatever you need
	\setlength{\tabcolsep}{0.5em} % for the horizontal padding
	\noindent
	\tabularx{\linewidth}{@{}r r p{1.4in} X}
	\toprule
	\hspace{-0.5cm}\textsc{\larger\bfseries{}Pin} & \textsc{\larger\bfseries{}Signal} & \textsc{\larger\bfseries{}Function}
	% & \textsc{\larger{}\bfseries{}Type}
	& \textsc{\larger\bfseries{}Description}
	\\ \midrule
}{ % End pinout start block, start pinout end block
	\endtabularx
	\noindent\makebox[\linewidth]{\rule{\linewidth}{0.6pt}}
	\endtable}

% Serial protocol drawing commands

\newcommand{\bitlabel}[2]{%
	\bitbox[]{#1}{%
		\raisebox{5pt}[4ex][0pt]{%
			\turnbox{45}{\fontsize{7}{7}\selectfont#2}%
		}%

	}}%

\newcommand{\pdent}{0.7}
\newcommand{\bitwidth}{2.1em}

\newcommand{\fhex}[1]{{\bfseries\ttfamily#1}}

\newcommand{\refpname}[1]{{\slshape\nameref{#1}}}
\newcommand{\fmsg}[2]{\hyperref[#2]{\ttfamily#1}}

\newcommand{\bitfield}[1]{#1}

% \renewcommand{\baselinestretch}{1.5}
\def\arraystretch{1}
% \normalsize
\newcommand{\msgid}[4]{
	\subparagraph{Message ID}\hfill \begin{minipage}[t]{\pdent\linewidth}
		#1 \refpname{#2} message {\should} be identified by the
		\hyperref[dirbit]{\bitfield{DIR}} bit set to \fhex{#3}, and a value of
		\fhex{0#4} in the \hyperref[msgbit]{\bitfield{MSG\_ID}} field.\end{minipage}
}

\newcommand{\nopayload}[2]{
	\subparagraph{Payload}\hfill  \begin{minipage}[t]{\pdent\linewidth}
		#1 \refpname{#2} message contains no data payload; the value of
		both the {\bitfield{EXT}} bit and {\bitfield{SUB}} field shall be zero (0 and 00).
	\end{minipage}
}

\newcommand{\expack}[9]{
	Example packet:

	\setlength{\tabcolsep}{0.25em} % for the horizontal padding
	\begin{center}
		% hex char of 4 bits (dir + id) 
		% hex char of 4 bits (data words count)

		% bit - direction
		% 3 bits - msg
		% 4 bits - data word count, binary

		% 2 hex char -  byte checksum 1
		% 2 hex char -  byte checksum 2

		% 8 bits - checksum byte 1
		% 8 bits - checksum byte 

		\begin{tabular}{rccccccc}
			\normalsize  {Hexadecimal: } & \fhex{0xAA 0xAA}
			                             & \fhex{0x#1}
			                             & \fhex{0x00}
			                             & \fhex{0x#2}
			                             & \fhex{0x{#6} 0x{#7}}
			\\
			\normalsize  {Binary: }      & $\underbracket{1010101010101010}_{\text{Sync}}$
			                             & $\underbracket{#3}_{\text{\rotatebox{90}{DIR}}}
				\underbracket{#4}_{\text{ID}}$
			                             & $\underbracket{00000000}_{\text{Reserved}}$
			                             & $\underbracket{0}_{\text{\rotatebox{90}{EXT}}}
				\underbracket{000}_{\text{SUB}}$
			                             & $\underbracket{#8#9}_{\text{Check bytes}} $
			\\
		\end{tabular}
	\end{center}
}

% \newcommand{\packer}[11]{
%     \expack{#1}{#2}{#3}{#4}{#5}{#6}{#7}{#8}{#9}
%     \msgid{#10}{#11}{#3}{#4}
% }

\definecolor{lightgray}{gray}{0.8}
\newcommand{\colorbitbox}[3]{%
	\rlap{\bitbox{#2}{\color{#1}\rule{\width}{\height}}}%
	\bitbox{#2}{#3}
}


\newcommand{\donames}[3]{
	% \vspace{-1.5\baselineskip}
	% \paragraph*{Signal Designation}
	% \vspace*{-0.5\baselineskip}\hrule\vspace{0.8\baselineskip} %{{{
	% \vspace{-1.8\baselineskip}
	% \begin{minipage}[t][][t]{0.47\linewidth}%
	%     \vspace{0pt}
	%     #5
	% \end{minipage}
	% % \hspace{0.02\linewidth}
	% \hfill
	% \vspace*{\baselineskip}
	% \begin{wrapfigure}{r}{0.6\linewidth}
	% \vspace{-.5\baselineskip}
	% \fbox{
	~\\~\\
	\noindent\begin{tabularx}{0.75\linewidth}{p{0.01cm} r @{:~} X r@{~~} c }
		           & Signal name      & \useVal{pinName#1} & PIN & \textbf{#1} \\
		~\newline~ & Signal reference & \useVal{pinName#2} & PIN & \textbf{#2} \\
		           & Source           & \bfseries{}#3      &     &             \\
		% \multicolumn{3}{l}{\bfseries{}#3}                     \\
	\end{tabularx}
	\\

	% }
	% \vspace{-.5\baselineskip}
	% \end{wrapfigure}
}


\newcommand{\scon}[4]{
	\paragraph*{Signal Convention}
	\begin{equation*}
		\text{\pinsig{#1}} = \begin{cases}
			\text{Logic \textbf{HIGH}}, & \text{if~~} \Delta #3_{\text{\textsc{Pin} \pinAliasNum{#1}}},#3_{\text{\textsc{Pin} \pinAliasNum{#2}}} \geq \text{#4} \\
			\text{Logic \textbf{LOW}},  & \text{otherwise}
		\end{cases}
	\end{equation*}
}



% vim: nospell

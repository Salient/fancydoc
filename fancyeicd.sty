\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{fancydoc/fancyeicd}[2020/10/09 Fancy Electrical Interface Control Document Framework]

\PackageInfo{fancyeicd}{Loading Framework for Electrical Interface Control Documents}

\RequirePackage{marginnote}
\RequirePackage{booktabs}
\RequirePackage{xcolor}
\RequirePackage{environ}
%  We don't really use this package, but we need cleveref, and it has to be loaded after amsmath if it's used, so we are going to preemptively atteck!
\RequirePackage{amsmath}
\RequirePackage[nameinlink]{cleveref}
\RequirePackage{tocloft}

% ==============================================
% Initialize Framework
% ==============================================

% Tweak page geometry

% \geometry{left=1.00in,right=1.00in,top=0.75in, bottom=1.00in}
%\geometry{left=1.25in,right=1.25in,top=1.25in, bottom=1.25in}
\geometry{margin=1in, right=0.75in}

% Techinical docs are better in sans
\renewcommand{\familydefault}{\sfdefault}
% \usepackage{helvet}
% \usepackage{avant}
% \smaller\smaller

% If run before, there will be things to remember
\InputIfFileExists{fancyPinData.tex}{
	\PackageInfo{fancyeicd}{Reading in previous pin definitions for connectors.}
} {
	\PackageInfo{fancyeicd}{No previous pin definitions.}
}

% Record references for use anywhere in the document.
\newwrite\fancyeicd@conndefs
\immediate\openout\fancyeicd@conndefs=fancyPinData.tex

% Print the type of connector with given name 
% Connector: #1
\newcommand{\getConnectorType}[1]{%
	\ifcsname fancy@conn@#1@connectorType\endcsname
		\csname fancy@conn@#1@connectorType\endcsname
		% \else
		% 	NO%
	\fi
}

% Print the gender of connector with given name 
% Connector: #1
\newcommand{\getConnectorGender}[1]{%
	\ifcsname fancy@conn@#1@connectorGender\endcsname
		\csname fancy@conn@#1@connectorGender\endcsname
		% \else
		% 	NO%
	\fi
}

% Print the name of  pin N in a given connector
% Connector: #1
% Pin number: #2
\newcommand{\pinNumName}[2]{%
	\ifcsname fancy@conn@#1@pinDef@numToName@#2\endcsname
		\csname fancy@conn@#1@pinDef@numToName@#2\endcsname
	\else
		? #1:#2 ?%
	\fi
}

% Print the type of pin N in a given connector 
% Connector: #1
% Pin number: #2
\newcommand{\pinNumType}[2]{%
	\ifcsname fancy@conn@#1@pinDef@numToType@#2\endcsname
		\csname fancy@conn@#1@pinDef@numToType@#2\endcsname
	\else
		red%
	\fi
}

% TODO: enforce unique aliases?
% Print the number of a pin in a given connector by alias
% Connector: #1
% Alias: #2
\newcommand{\pinAliasNum}[2]{%
	\ifcsname fancy@conn@#1@pinDef@aliasToNum@#2\endcsname%
		\csname fancy@conn@#1@pinDef@aliasToNum@#2\endcsname%
	\else
		??%
	\fi
}

% Print the name of a pin in a given connector by alias
% Connector: #1
% Alias: #2
\newcommand{\pinAliasName}[2]{%
	\ifcsname fancy@conn@#1@pinDef@aliasToName@#2\endcsname
		\csname fancy@conn@#1@pinDef@aliasToName@#2\endcsname
	\else
		??%
	\fi
}

% Print styalized text "Pin N" a pin in a given connector by alias
% Connector: #1
% Alias: #2
\newcommand{\pinAliasRef}[2]{%
	\edef\thispin{\pinAliasNum{#1}{#2}}%
	% {\smaller\sig{\sloppy\sloppy\pinNumName{\thispin}} (\textbf{\textsc{\smaller{}Pin \thispin})}}}
	{\pinNumName{#1}{\thispin} (\textbf{\textsc{\smaller{}Pin \thispin})}}}


% Print styalized text "Pin N" a pin in a given connector by alias
% Connector: #1
% Alias: #2
\newcommand{\pinNumRef}[2]{%
	% {\smaller\sig{\sloppy\sloppy\pinNumName{\thispin}} (\textbf{\textsc{\smaller{}Pin \thispin})}}}
	{\pinNumName{#1}{#2} (\textbf{\textsc{\smaller{}Pin #2})}}}


\newcommand{\pinsig}[2]{%
	\edef\thispin{\pinAliasNum{#1}{#2}}%
	% {\smaller\sig{\pinNumName{\thispin}}}}
	{\sig{\pinNumName{#1}{\thispin}}}}
\newcommand{\state}[1]{\sloppy\fbox{\sig{#1}}\xspace}

% ==============================================
% Define colors
% ==============================================
\definecolor{lightgray}{gray}{0.8}
\colorlet{lightblue}{blue!40!white}
\colorlet{lightgreen}{green!40!white}
\colorlet{lightyellow}{yellow!40!white}
\colorlet{lightorange}{orange!40!white}
\colorlet{lightpurple}{purple!40!white}

\newcommand{\modcolor}{black}


% Start framework definitions
% Styles
\tikzset{%
	pinnode/.style = {inner sep = 2pt, minimum width=18pt, draw, circle, font=\bfseries},
	typePower/.style = {fill = red!70!white},
	typeDiscreteIn/.style = {fill = yellow!60},
	typeAnalogOut/.style = {fill = orange!50},
	typeAnalogIn/.style = {fill = yellow!80!gray},
	% typeGround/.style = {fill = black, text=white, font=\bfseries},
	typeGround/.style = {fill = black, text=white},
	% typeGround/.style = {fill = green!50!white, text=black},
	typeDiffOutHi/.style = {fill = cyan!50!white},
	typeDiffOutLo/.style = {fill = cyan!20!white},
	typeDiffInHi/.style = {fill = green!90!black},
	typeDiffInLo/.style = {fill = green!30},
	typeIsoDiffGnd/.style = {fill = brown!20},
	typeBreakwireEx/.style = {fill = violet!40},
	% typeBreakwireSense/.style = {fill = orange, pattern=dots,pattern color=yellow},
	typeBreakwireSense/.style = {fill = purple!80, text=white},
	typeTestInput/.style = {fill = purple!30 },
	typeReserved/.style = {fill = gray!10, font=\color{gray}},
	typeUsed/.style = {fill = gray!30, font=\color{gray}}
}
% TODO - stream line above with below

\def\legendContents{
	POWER/typePower,
	POWER RTN\slash BOARD GND/typeGround,
	DISCRETE DIFFERENTIAL INPUT (+)/typeDiffInHi,
	DISCRETE DIFFERENTIAL INPUT (-)/typeDiffInLo,
	% DATA\/COMM. NEG. (-)/typeDataLo,
	% ISOLATED\/DIFFERENTIAL REF. (-)/typeIsoDiffGnd,
	DISCRETE DIFFERENTIAL OUPUT (+)/typeDiffOutHi,
	DISCRETE DIFFERENTIAL OUPUT (-)/typeDiffOutLo,
	% DISCRETE LOGIC INPUT/typeDiscreteIn,
	ANALOG SINGLE ENDED OUTPUT SIGNAL/typeAnalogOut,
	ANALOG SINGLE ENDED INPUT SIGNAL/typeAnalogIn,
	BREAK WIRE LOOP/typeBreakwireEx,
	% NON-TACTICAL\slash TEST USE ONLY/typeTestInput,
	RESERVED\slash UNUSED/typeReserved}


% ==============================================
% Implementations
% ==============================================
\newcommand{\placeLegend}[1]{
	% \vfill
	% \resizebox{0.20\textwidth}{!}{
	\begin{tikzpicture} [scale=0.50,transform shape, every node/.style = {node distance=10pt, outer sep = 0cm, inner sep = 0cm}, font = \sffamily]

		% prime the pump
		\coordinate (lentry0);
		\foreach \n/\c [count=\x, remember=\x as \last (initially 0)] in #1 {
				\node[\c, pinnode, below = of lentry\last] (lentry\x)  {}; \node[right = of lentry\x] {\n};
			}
	\end{tikzpicture}
	% }
	% \vfill
}


% Development notes

% Should have a defined name for each type/shape/number pins of connector
% Like an enum of types. And for each type there is an expected number of pins, and if that many pins have not been defined, there should be an error printed with the number of expected vs number defined shown.

% TODO: refactor for arbitrary pin counts


\newcommand{\labelPins}[1]{
	% Draw pins with fill color specified, draw label and pin
	\foreach \q/\p [count=\x] in {##1}{
			\node[pinnode, \p] at (pin\x) (pin\x){\x}; % Label pin number

			% Normal pins written in black
			\renewcommand{\modcolor}{black}

			% Unused/reserved pins in gray
			\findwords[q]{\q}{typeReserved}
			\ifnum\theresult > 0
				\renewcommand{\modcolor}{gray}
			\fi

			% TODO: update code for different connector types
			\ifnum\x>13
				\node[\modcolor, anchor = east, minimum width=0cm, left = of pin\x, xshift=0.5in] (pinName\x) {\sig{\caseupper{\q}}};
			\else
				\node[\modcolor, anchor = west, minimum width = 0cm, right = of pin\x, xshift=-0.5in] (pinName\x){\sig{\caseupper{\q}}};
			\fi
			\draw[dashed,gray] (pinName\x) -- (pin\x);
		}
}


% Returns signal name of pin N
% Pin Number: #1
\newcommand{\labelPinsByReference}[1]{
	\foreach \q in {1,...,33}{
			\node[pinnode, \pinNumType{#1}{\q}] at (#1 pin\q) (#1 pin\q){\q};
			\ifnum\q>17
				% uncomment to have middle row labels alternate left and right
				% \ifodd\q
				% 	\node[\pinNumType{#1}{\q}, black, fill=none, anchor = east, minimum width=0cm, left = 60pt of #1 pin\q] (#1 pinName\q) {\pinNumName{#1}{\q}};
				% 	\draw[dashed,gray] (#1 pinName\q) -- (#1 pin\q);
				% \else
				\node[\pinNumType{#1}{\q}, black, fill=none, anchor = west, minimum width=0cm, right = 75pt of #1 pin\q] (#1 pinName\q) {\pinNumName{#1}{\q}};
				\draw[dashed,gray] (#1 pinName\q) -- (#1 pin\q);
				% \fi
			\else
				\node[\pinNumType{#1}{\q}, black, fill=none, anchor = west, minimum width=0cm, right = 150pt of #1 pin\q] (#1 pinName\q) {\pinNumName{#1}{\q}};
				\draw[dashed,gray] (#1 pinName\q) -- (#1 pin\q);
			\fi
		}

	\foreach \q in {34,...,50}{
			\node[pinnode, \pinNumType{#1}{\q}] at (#1 pin\q) (#1 pin\q){\q};
			\node[\pinNumType{#1}{\q}, black, fill=none, anchor = east, minimum width=0cm, left = 50pt  of #1 pin\q] (#1 pinName\q) {\pinNumName{#1}{\q}};
			\draw[dashed,gray] (#1 pinName\q) -- (#1 pin\q);
		}
}

% 
\newcommand{\pinspacing}{30pt}
% 50 pin is 1-17, 18 - 33, 34 - 50

\newcommand{\drawConnector@DsubFifty}[1]{

	\newtoggle{malePins}
	\newcommand{\direction}{above}
	% TODO: make this less stupid
	\newcommand{\directionleft}{above left}
	\newcommand{\directionright}{above right}

	\ifcsstring{fancy@conn@#1@connectorGender}{male}
	{
		\toggletrue{malePins}
		\renewcommand{\direction}{below}
		% TODO: make this less stupid
		\renewcommand{\directionleft}{below left}
		\renewcommand{\directionright}{below right}


	} {
		\ifcsstring{fancy@conn@#1@connectorGender}{female}
		{
			\togglefalse{malePins} % not strictly necessary, but readability yo
		}{
			\PackageError{fancy}{Attempt to render connector or invalid or unassigned gender: \getConnectorGender{#1}}{}
		}
	}

	% \else
	% 	\PackageError{fancyEICD}{Attempting to draw a connector with incorrect name or unassigned gender!}{}
	% \fi

	% Lay out pins of connector and draw boundary
	\coordinate (#1 pin0); % Establish name of origin
	\foreach \x [remember=\x as \lastx (initially 0)] in {1,...,17}{% draw top row. Backwards because female
			\coordinate[\direction = \pinspacing of #1 pin\lastx] (#1 pin\x);
		}
	\coordinate (adjOff) at ($ (#1 pin1)!0.5!(#1 pin2) $);
	\coordinate[left = \pinspacing of adjOff] (#1 pin18);
	\foreach \x [remember=\x as \lastx (initially 18)] in {19,...,33}{% draw top row. Backwards because female

			\coordinate[\direction = \pinspacing of #1 pin\lastx] (#1 pin\x);
		}
	% \coordinate (adjOff2) at ($ (#1 pin1)!0.5!(#1 pin2) $);
	\coordinate[\directionleft = \pinspacing and  2*\pinspacing of #1 pin0)] (#1 pin34);

	\foreach \x [remember=\x as \lastx (initially 34)] in {35,...,50}{% draw top row. Backwards because female
			\coordinate[\direction = \pinspacing of #1 pin\lastx] (#1 pin\x);
		}

	% Draw connector shell and fill

	% mark the four corners
	\coordinate[\directionright = 60pt and 30pt of #1 pin17] (corn1);
	\coordinate[\directionright = -60pt and 30pt of #1 pin1] (corn2);
	\coordinate[\directionleft = -55pt and 30pt of #1 pin35] (corn3);
	\coordinate[\directionleft = 55pt and 30pt of #1 pin49] (corn4);

	\draw[ultra thick, rounded corners = 1cm, name path = shell, fill=brown!50!gray, fill opacity=0.2] (corn1) -- (corn2) -- (corn3) -- (corn4) -- cycle;
	% \path[name path = cgnd] (corn3) ++(0cm, -0.75cm) ++(70:1cm) -- ++(-135:2cm);
	% \draw[name intersections={of=shell and cgnd, name=i}] (i-1) coordinate (xmark);

	% uncomment to draw earth symbol to connector shell
	% \draw[line width = 0.75pt] (xmark) ++(0,-10pt) -- ++(325:0.5cm) -- ++(1.75cm,0cm) -- ++(0cm, -0.5cm) coordinate(tc);
	% \draw[line width = 1.15pt] (tc)       -- +(-0.5cm,0cm) coordinate (t1) -- +(0.5cm,0cm) coordinate (t2);
	% \draw[line width = 1.15pt] (t1) -- +(-75:0.5cm);
	% \draw[line width = 1.15pt] (tc) -- +(-75:0.5cm);
	% \draw[line width = 1.15pt] (t2) -- +(-75:0.5cm);
}

\newcommand{\labelPinsByList}[2]{ % #1 = connid, #2 tikz style for pin comma separated list


	% align names on the left side of the connector
	\draw[line width = 2.15pt] (t2) -- +(-75:0.5cm);
	% Draw pins with fill color specified, draw label and pin
	\foreach \q [count=\x] in #2 {
			\node[pinnode, \q] at (#1 pin\x) (#1 pin\x){\x}; % Label pin number

			% Normal pins written in black
			\renewcommand{\modcolor}{black}

			% TODO: update code for different connector types
			\ifnum\x>13
				\node[\q, fill=none,  anchor = east, minimum width=0cm, left = of #1 pin\x, xshift=0.5in] (#1 pinName\x) {\pinNumName{#1}{\x}};
			\else
				\node[\q, fill=none,anchor = west, minimum width = 0cm, right = of #1 pin\x, xshift=-0.5in] (#1 pinName\x){\pinNumName{#1}{\x}};
			\fi
			\draw[dashed,gray] (#1 pinName\x) -- (#1 pin\x);
		}
}

\newcommand{\drawConnector}[1]{


	% Call correct function to draw the connector type
	\expandafter\csname \expanded{drawConnector@\getConnectorType{#1}\endcsname}{#1}



	% % Lay out pins of connector and draw boundary
	% \coordinate (#1 pin0); % Establish name of origin
	% \foreach \x [remember=\x as \lastx (initially 0)] in {1,...,17}{% draw top row. Backwards because female
	% 		% \node[above  of = pin\lastx, yshift=-0.2cm] (pin\x) {\x};
	% 		\coordinate[above = \pinspacing of #1 pin\lastx] (#1 pin\x);
	% 	}
	% \coordinate (adjOff) at ($ (#1 pin1)!0.5!(#1 pin2) $);
	% \coordinate[left = \pinspacing of adjOff] (#1 pin18);
	% \foreach \x [remember=\x as \lastx (initially 18)] in {19,...,33}{% draw top row. Backwards because female
	% 		% \node[above of = pin\lastx, yshift=-0.2cm] (pin\x) {\x};
	% 		\coordinate[above = \pinspacing  of #1 pin\lastx] (#1 pin\x);
	% 	}
	% % \coordinate (adjOff2) at ($ (#1 pin1)!0.5!(#1 pin2) $);
	% \coordinate[above left = \pinspacing and  2*\pinspacing of #1 pin0)] (#1 pin34);
	%
	% \foreach \x [remember=\x as \lastx (initially 34)] in {35,...,50}{% draw top row. Backwards because female
	% 		% \node[above of = pin\lastx, yshift=-0.2cm] (pin\x) {\x};
	% 		\coordinate[above = \pinspacing of #1 pin\lastx] (#1 pin\x);
	% 	}
	%
	% % Draw connector shell and fill
	%
	% % mark the four corners
	% \coordinate[above right = of #1 pin17, xshift=-10pt, yshift=2pt] (corn1);
	% \coordinate[below right = of #1 pin1, xshift=-10pt, yshift=-2pt] (corn2);
	% \coordinate[below left = of #1 pin35, xshift=10pt, yshift=-12pt] (corn3);
	% \coordinate[above left = of #1 pin49, xshift=10pt, yshift=12pt] (corn4);
	%
	% \draw[red,thick](corn4) -- (corn3);
	%
	% \draw[ultra thick, rounded corners = 1cm, name path = shell, fill=brown!50!gray, fill opacity=0.2] (corn1) -- (corn2) -- (corn3) -- (corn4) -- cycle;
	% \path[name path = cgnd] (corn3) ++(0cm, -0.75cm) ++(70:1cm) -- ++(-135:2cm);
	% \draw[name intersections={of=shell and cgnd, name=i}] (i-1) coordinate (xmark);
	% \draw[line width = 0.75pt] (xmark) ++(0,-10pt) -- ++(325:0.5cm) -- ++(1.75cm,0cm) -- ++(0cm, -0.5cm) coordinate(tc);
	% \draw[line width = 1.15pt] (tc)       -- +(-0.5cm,0cm) coordinate (t1) -- +(0.5cm,0cm) coordinate (t2);
	% \draw[line width = 1.15pt] (t1) -- +(-75:0.5cm);
	% \draw[line width = 1.15pt] (tc) -- +(-75:0.5cm);
	% \draw[line width = 1.15pt] (t2) -- +(-75:0.5cm);
}

\newcommand{\renderConnector}[2]{
	\begin{figure}[htb]
		\centering
		\resizebox{!}{0.6\textheight}{
			\begin{tikzpicture}% [every node/.style ={ minimum width = 0in}]
				\drawConnector{#1}
				\labelPinsByReference{#1}
				% \node[below = of pin1,yshift=0.5cm] {ACES \ac{ESAD} Pinout};
			\end{tikzpicture}}
		\hspace{1cm}\placeLegend{\legendContents}
		\vspace{0.5cm}
		\caption{#2}%
		\label{conndiag#1}
	\end{figure}
}

\newcommand{\renderConnectorWoLegend}[2]{
	\begin{figure}[htb]
		\centering
		\resizebox{!}{0.5\textheight}{
			\begin{tikzpicture}% [every node/.style ={ minimum width = 0in}]
				\drawConnector{#1}
				\labelPinsByReference{#1}
				% \node[below = of pin1,yshift=0.5cm] {ACES \ac{ESAD} Pinout};
			\end{tikzpicture}}
		\vspace{0.5cm}
		\caption{#2}%
		\label{#1pinout}
	\end{figure}
}


% \renderConnectorWithColorList{pinListName}{% of page height to be}{caption text}{How to label pin names}{colors for each pin as list}{unique id}
\newcommand{\renderConnectorWithColorList}[6]{
	\begin{figure}[htb]
		\centering
		\resizebox{!}{#2\textheight}{
			\begin{tikzpicture}% [every node/.style ={ minimum width = 0in}]
				\drawConnector{#1}
				#4{#1}{#5}
			\end{tikzpicture}}
		\vspace{0.5cm}
		\caption{#3}%
		\label{conndiag#1#6}
	\end{figure}
}


% \renderConnectorWithColorList{pinListName}{% of page height to be}{caption text}{How to label pin names}{colors for each pin as list}{unique id}
\newcommand{\renderWrappedConnectorWithColorList}[7]{
	\begin{wrapfigure}{r}{0.4\linewidth}
		\centering
		\resizebox{!}{#2\textheight}{
			\begin{tikzpicture}% [every node/.style ={ minimum width = 0in}]
				\drawConnector{#1}
				#4{#1}{#5}
			\end{tikzpicture}}
		\vspace{0.15 cm}
		\caption{#3}%
		\label{conndiag#1#6}
		\vspace{#7 cm}
	\end{wrapfigure}
}

% \NewEnviron{connector}[5]{
% 	\begin{figure}[htb]
% 		\centering
% 		\resizebox{!}{#2\textheight}{\begin{tikzpicture}% [every node/.style ={ minimum width = 0in}]
% 				\drawConnector{#1}
% 				#4{#1}{#5}
% 				\BODY%
% 			\end{tikzpicture}}
% 		\vspace{0.5cm}
% 		\caption{#3}%
% 		\label{pinout#1}
% 	\end{figure}
% }

% \begin{landscape}
% \begin{minipage}{0.4\linewidth}
% \begin{figure}[htpb]
%     \centering
% \resizebox{0.5\linewidth}{!}{


% \caption{ACES Fuze Pinout}%
% \end{figure}
% \end{minipage}
% \begin{minipage}{0.4\linewidth}
% \begin{figure}[htpb]
% \centering
% \resizebox{!}{0.7\textheight}{

\newcommand{\sref}[1]{{\smaller\sig{#1}}}
% \newcommand{\srefn}[1]{\useVal{pinName#1}}


\providetoggle{printtable}
\toggletrue{printtable}


% TODO - make it so using reference or alias lookups inside a pinout environment don't require the name of the environment

% Define pinout environment. Like a list, but successive definition of pin
% signals, type, alias Each pinout defines a connector of given name and type
% it is possible to continue further defining pins in a previous pinout
% environment if it is given the same name. This is mostly useful for breaking
% the pin list across pages at will.
\newenvironment{pinout}[3]{


	% Are we adding on some more pins to this connector?
	\newtoggle{continuing}

	\ifdef{\thefancy@conn@#1@pincount}{ % True \addtocounter{table}{-1}
		\toggletrue{continuing}
		% Sanity checks
		% TODO: test if the connector type is different than previously defined
	}{ % False
		\newcounter{fancy@conn@#1@pincount}
		\setcounter{fancy@conn@#1@pincount}{1}
		\togglefalse{continuing} % not strictly necessary, but readability yo

		\immediate\write\fancyeicd@conndefs{%
			\unexpanded{\global\@namedef}{fancy@conn@#1@connectorType}\unexpanded{{#2}}%
		}

		\immediate\write\fancyeicd@conndefs{%
			\unexpanded{\global\@namedef}{fancy@conn@#1@connectorGender}\unexpanded{{#3}}%
		}
	}

	\newcommand{\safecounter}{\csname thefancy@conn@#1@pincount\endcsname}

	\newcommand{\defPin}[4]{
		%   Arguments should be {number/counterreference}
		%                       {Signal name (underscores escaped....need to figure out how to do that )}
		%                       {shortname}

		\ifcsname fancy@conn@#1@pinDef@##1@definedx\endcsname
			\PackageError{fancy}{Connector '#1' Pin ##1 is defined twice}{}
		\else
			\immediate\write\fancyeicd@conndefs{%
				\unexpanded{\global\@namedef}{fancy@conn@#1@pinDef@numToName@##1}\unexpanded{{\sig{##2}}}%
			}
			\immediate\write\fancyeicd@conndefs{%
				\unexpanded{\global\@namedef}{fancy@conn@#1@pinDef@numToAlias@##1}\unexpanded{{##3}}%
			}
			\immediate\write\fancyeicd@conndefs{%
				\unexpanded{\global\@namedef}{fancy@conn@#1@pinDef@numToType@##1}\unexpanded{{##4}}%
			}
			\immediate\write\fancyeicd@conndefs{%
				\unexpanded{\global\@namedef}{fancy@conn@#1@pinDef@aliasToName@##3}\unexpanded{{\sig{##2}}}%
			}
			\immediate\write\fancyeicd@conndefs{%
				\unexpanded{\global\@namedef}{fancy@conn@#1@pinDef@aliasToNum@##3}{##1}%
			}
			% \unexpanded{\global\@namedef}{fancy@conn@#1@pinDef@##1@defined}{}
			\global\@namedef{fancy@conn@#1@pinDef@##1@defined}{}%
		\fi
	}
	% TODO - stream line above
	%
	% Inserts row in pinout definition
	% First column will be pin number, taken care of automatically.  Second is
	% Pin Name; will be formatted automatically (spaces not included) Third,

	% TYPE Forth, PARAMS Fifth, DESC.
	%
	% So, four arguments.

	% Declare row types and commands

	% pin is [5]; pin name, alias, type, function, desc
	% defPin is [4]; pin num, name, alias, type
	\newcommand{\pin}[5]{
		\defPin{\safecounter}{##1}{##2}{##3}%
		% \defValwCount{fancy@conn@#1@pinName\thepincount}{\sig{##1}}%
		% \defValwCount{pinType\thepincount}{##2}
		% \stepcounter{fancy@conn@#1@pincount}
		% \label{##1desc}
		{\textbf{\smaller\safecounter}}
		& \sig{\smaller ##1}
		&  {\smaller##4}
		& {\smaller ##5} \\
		\stepcounter{fancy@conn@#1@pincount}%
	}

	\newcommand{\resvpin}{
		\defPin{\safecounter}{RESERVED}{resv}{typeReserved}%
		% \defValwCount{fancy@conn@#1@pinName\thepincount}{\color{gray}{\sig{}}}%
		\textbf{\textcolor{gray}{\smaller\safecounter}} & \textcolor{gray}{\sig{\smaller{}N/C}} & % \textcolor{gray}{\smaller Reserved} 
		&\textcolor{gray}{\smaller{}Not used in  tactical configuration.}  \\ % \hline{}
		\stepcounter{fancy@conn@#1@pincount}%
	}


	% Same as \pin, but formatted gray and replaces Pin Name with "RESERVED",
	% but appends a fifth bolded statement why it is not used
	% \newcommand{\resvpin}[5]{
	%     \textcolor{gray}{\thepincount}
	%     & \textcolor{gray}{\sig{\smaller{}\itshape##5}}
	%     % & \textcolor{gray}{\itshape##1}
	%       &
	%       % {\itshape\textcolor{gray}{##3}}\newline
	%       \textcolor{gray}{\bfseries##4}
	%       \\ \hline{}
	%       \defValwCount{pinName\thepincount}{\color{gray}{\sig{reserved}}}
	%       \defValwCount{pinType\thepincount}{##1}
	%       \stepcounter{pincount}
	%       % \label{##5desc}
	%   }

	% Setup table and tabular env

	% TODO, get around this hack properly
	\table[htbp!]

	\iftoggle{continuing}{ % True 
		\addtocounter{table}{-1}
		\caption*{Fuze Pin Descriptions (cont.)}
	}{ % False
		\caption{Fuze Pin Descriptions}
	}

	% \smaller{}
	\label{pinlist#1}
	% \smaller{}

	\def\arraystretch{1.00}%  1 is the default, change whatever you need
	\setlength{\tabcolsep}{0.5em} % for the horizontal padding
	\noindent
	\tabularx{\linewidth}{@{}r l l X}
	\toprule
	\textsc{\larger\bfseries{}Pin} & \textsc{\larger\bfseries{}Signal Name} % &  \textsc{\larger\bfseries{}Details}
	& \textsc{\larger{}\bfseries{}Type}
	& \textsc{\larger\bfseries{}Description}
	\\ \midrule
}{ % End pinout start block, start pinout end block
	\endtabularx


	\noindent\makebox[\linewidth]{\rule{\linewidth}{0.6pt}}
	\endtable}

% Serial protocol drawing commands

\newcommand{\bitlabel}[2]{%
	\bitbox[]{##1}{%
		\raisebox{5pt}[4ex][0pt]{%
			\turnbox{45}{\fontsize{7}{7}\selectfont#2}%
		}%

	}}%

\newcommand{\pdent}{0.7}
\newcommand{\bitwidth}{2.1em}

\newcommand{\fhex}[1]{{\bfseries\ttfamily#1}}

\newcommand{\refpname}[1]{{\slshape\nameref{#1}}}
\newcommand{\fmsg}[2]{\hyperref[#2]{\ttfamily#1}}

\newcommand{\bitfield}[1]{#1}

% \renewcommand{\baselinestretch}{1.5}
\def\arraystretch{1}
% \normalsize
\newcommand{\msgid}[4]{
	\subparagraph{Message ID}\hfill \begin{minipage}[t]{\pdent\linewidth}
		#1 \refpname{#2} message {\should} be identified by the
		\hyperref[dirbit]{\bitfield{DIR}} bit set to \fhex{#3}, and a value of
		\fhex{0#4} in the \hyperref[msgbit]{\bitfield{MSG\_ID}} field.\end{minipage}
}

\newcommand{\nopayload}[2]{
	\subparagraph{Payload}\hfill  \begin{minipage}[t]{\pdent\linewidth}
		#1 \refpname{#2} message contains no data payload; the value of
		both the {\bitfield{EXT}} bit and {\bitfield{SUB}} field shall be zero (0 and 00).
	\end{minipage}
}

\newcommand{\expack}[9]{
	Example packet:

	\setlength{\tabcolsep}{0.25em} % for the horizontal padding
	\begin{center}
		% hex char of 4 bits (dir + id) 
		% hex char of 4 bits (data words count)

		% bit - direction
		% 3 bits - msg
		% 4 bits - data word count, binary

		% 2 hex char -  byte checksum 1
		% 2 hex char -  byte checksum 2

		% 8 bits - checksum byte 1
		% 8 bits - checksum byte 

		\begin{tabular}{rccccccc}
			\normalsize  {Hexadecimal: } & \fhex{0xAA 0xAA}
			                             & \fhex{0x#1}
			                             & \fhex{0x00}
			                             & \fhex{0x#2}
			                             & \fhex{0x{#6} 0x{#7}}
			\\
			\normalsize  {Binary: }      & $\underbracket{1010101010101010}_{\text{Sync}}$
			                             & $\underbracket{#3}_{\text{\rotatebox{90}{DIR}}}
				\underbracket{#4}_{\text{ID}}$
			                             & $\underbracket{00000000}_{\text{Reserved}}$
			                             & $\underbracket{0}_{\text{\rotatebox{90}{EXT}}}
				\underbracket{000}_{\text{SUB}}$
			                             & $\underbracket{#8#9}_{\text{Check bytes}} $
			\\
		\end{tabular}
	\end{center}
}

% \newcommand{\packer}[11]{
%     \expack{#1}{#2}{#3}{#4}{#5}{#6}{#7}{#8}{#9}
%     \msgid{#10}{#11}{#3}{#4}
% }

\definecolor{lightgray}{gray}{0.8}
\newcommand{\colorbitbox}[3]{%
	\rlap{\bitbox{#2}{\color{#1}\rule{\width}{\height}}}%
	\bitbox{#2}{#3}
}


\newcommand{\donames}[3]{
	% \vspace{-1.5\baselineskip}
	% \paragraph*{Signal Designation}
	% \vspace*{-0.5\baselineskip}\hrule\vspace{0.8\baselineskip} %{{{
	% \vspace{-1.8\baselineskip}
	% \begin{minipage}[t][][t]{0.47\linewidth}%
	%     \vspace{0pt}
	%     #5
	% \end{minipage}
	% % \hspace{0.02\linewidth}
	% \hfill
	% \vspace*{\baselineskip}
	% \begin{wrapfigure}{r}{0.6\linewidth}
	% \vspace{-.5\baselineskip}
	% \fbox{
	~\\~\\
	\noindent\begin{tabularx}{0.75\linewidth}{p{0.01cm} r @{:~} X r@{~~} c }
		           & Signal name      & \pinNumName{#1} & PIN & \textbf{#1} \\
		~\newline~ & Signal reference & \pinNumName{#2} & PIN & \textbf{#2} \\
		           & Source           & \bfseries{}#3   &     &             \\
		% \multicolumn{3}{l}{\bfseries{}#3}                     \\
	\end{tabularx}
	\\

	% }
	% \vspace{-.5\baselineskip}
	% \end{wrapfigure}
}


\newcommand{\scon}[4]{
	\paragraph*{Signal Convention}
	\begin{equation*}
		\text{\pinsig{#1}} = \begin{cases}
			\text{Logic \textbf{HIGH}}, & \text{if~~} \Delta #3_{\text{\textsc{Pin} \pinAliasNum{#1}}},#3_{\text{\textsc{Pin} \pinAliasNum{#2}}} \geq \text{#4} \\
			\text{Logic \textbf{LOW}},  & \text{otherwise}
		\end{cases}
	\end{equation*}
}

% \bitregister{address}{contents}{initial values}
\newcommand{\bitregister}[3]{

	\begin{figure}[hptb]
		\centering
		\begin{bytefield}[leftcurly=., leftcurlyspace=0pt, rightlabelspace=5pt, leftlabelspace=15pt, endianness=big, bitwidth=0.085\linewidth, bitformatting={\scriptsize\slshape}]{8}
			\bitheader[lsb=0]{0-7} \\
			\begin{leftwordgroup}{\ttfamily Byte #1}
				\bitboxes{1}{#2}
			\end{leftwordgroup} \\

			\begin{leftwordgroup}{Initial Values}
				\bitboxes{1}[t]{#3}
			\end{leftwordgroup} \\
		\end{bytefield}
		% \caption{Bitfield Description of REQUEST\_STATUS Response, Byte #1}
		\label{statuspack#1}
	\end{figure}
}


% vim: nospell
